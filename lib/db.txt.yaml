# (View this file in .yaml syntax for nice highlighting)
Basic definition: 
	Imagine a file where every line had 2 sections: A "key", and a "value"
		(something like "name: Levi")
	Each file can have many (<= 20,000) lines, and can be <= 1 MB in size
	Then you would have folders of these files. 
	So, to record student last names, you would have: 
	- 2019: 
		- 9th grade.txt: 
		 	- Jordan: Mitler
			- Ozzie: Kramer
		- 10th grade.txt:
			- Levi: Lesches
			- William: Kremer
		(And so on)
	- 2018: 
		- 9th grade.txt: 
	 		- Levi: Lesches
			- William: Kremer
	You get it
	In Firestore (the database I'm proposing:
		- each folder (year) would be called a "collection",
		- each file (grade) is called a document, and
		- each key, value pair is kalled a "field", value pair
			- Values can be strings, ints, lists, dictionaries/mappings, etc.

I propose we structure our data like so: 

Class collection: 
	- for every class we have a document with the fields: 
		- ID: int,
		- name: string,
		- teacher: string

Student collection:
	- Every student will have their own document with the fields:
		- ID: int,
		- first: string,
		- last: string,
		- M: (dictionary/mapping)
			- 1: (dictionary/mapping)
				- room: string,
				- class ID: int
		- R: (dictionary/mapping) 
			- 1: (dictionary/mapping)
				- room: string,
				- class ID: int
			- (And so on)
		- (And so on)
*Lists don't have order*
This is why I use dictionary/mapping for each schedule instead of a list